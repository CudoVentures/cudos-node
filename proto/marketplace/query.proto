syntax = "proto3";
package marketplace;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "marketplace/params.proto";
import "marketplace/collection.proto";
import "marketplace/nft.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/CudoVentures/cudos-node/x/marketplace/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get =
        "/CudoVentures/cudos-node/marketplace/params";
  }

  // Queries a Collection for sale by id.
  rpc Collection(QueryGetCollectionRequest)
      returns (QueryGetCollectionResponse) {
    option (google.api.http).get =
        "/CudoVentures/cudos-node/marketplace/collection/{id}";
  }

  // Queries all Collection items for sale.
  rpc CollectionAll(QueryAllCollectionRequest)
      returns (QueryAllCollectionResponse) {
    option (google.api.http).get =
        "/CudoVentures/cudos-node/marketplace/collection";
  }

  // Queries a Nft for sale by id.
  rpc Nft(QueryGetNftRequest) returns (QueryGetNftResponse) {
    option (google.api.http).get =
        "/CudoVentures/cudos-node/marketplace/nft/{id}";
  }

  // Queries all Nft items for sale.
  rpc NftAll(QueryAllNftRequest) returns (QueryAllNftResponse) {
    option (google.api.http).get = "/CudoVentures/cudos-node/marketplace/nft";
  }

  // Queries a list of CollectionByDenomId items.
  rpc CollectionByDenomId(QueryCollectionByDenomIdRequest)
      returns (QueryCollectionByDenomIdResponse) {
    option (google.api.http).get = "/CudoVentures/cudos-node/marketplace/"
                                   "collection_by_denom_id/{denom_id}";
  }

  // Queries a list of ListAdmins items.
  rpc ListAdmins(QueryListAdminsRequest) returns (QueryListAdminsResponse) {
    option (google.api.http).get =
        "/CudoVentures/cudos-node/marketplace/list_admins";
  }

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetCollectionRequest { uint64 id = 1; }

message QueryGetCollectionResponse {
  Collection collection = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllCollectionRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCollectionResponse {
  repeated Collection collection = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNftRequest { uint64 id = 1; }

message QueryGetNftResponse { Nft nft = 1 [ (gogoproto.nullable) = false ]; }

message QueryAllNftRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNftResponse {
  repeated Nft nft = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCollectionByDenomIdRequest { string denom_id = 1; }

message QueryCollectionByDenomIdResponse {
  Collection collection = 1 [ (gogoproto.nullable) = false ];
}

message QueryListAdminsRequest {}

message QueryListAdminsResponse {
  repeated string admins = 1 [ (gogoproto.nullable) = false ];
}

// this line is used by starport scaffolding # 3
