// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: marketplace/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPublishCollection struct {
	Creator         string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DenomId         string    `protobuf:"bytes,2,opt,name=denomId,proto3" json:"denomId,omitempty"`
	MintRoyalties   []Royalty `protobuf:"bytes,3,rep,name=mintRoyalties,proto3" json:"mintRoyalties"`
	ResaleRoyalties []Royalty `protobuf:"bytes,4,rep,name=resaleRoyalties,proto3" json:"resaleRoyalties"`
}

func (m *MsgPublishCollection) Reset()         { *m = MsgPublishCollection{} }
func (m *MsgPublishCollection) String() string { return proto.CompactTextString(m) }
func (*MsgPublishCollection) ProtoMessage()    {}
func (*MsgPublishCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{0}
}
func (m *MsgPublishCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishCollection.Merge(m, src)
}
func (m *MsgPublishCollection) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishCollection.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishCollection proto.InternalMessageInfo

func (m *MsgPublishCollection) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPublishCollection) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func (m *MsgPublishCollection) GetMintRoyalties() []Royalty {
	if m != nil {
		return m.MintRoyalties
	}
	return nil
}

func (m *MsgPublishCollection) GetResaleRoyalties() []Royalty {
	if m != nil {
		return m.ResaleRoyalties
	}
	return nil
}

type MsgPublishCollectionResponse struct {
}

func (m *MsgPublishCollectionResponse) Reset()         { *m = MsgPublishCollectionResponse{} }
func (m *MsgPublishCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPublishCollectionResponse) ProtoMessage()    {}
func (*MsgPublishCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{1}
}
func (m *MsgPublishCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishCollectionResponse.Merge(m, src)
}
func (m *MsgPublishCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishCollectionResponse proto.InternalMessageInfo

type MsgPublishNft struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TokenId string     `protobuf:"bytes,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	DenomId string     `protobuf:"bytes,3,opt,name=denomId,proto3" json:"denomId,omitempty"`
	Price   types.Coin `protobuf:"bytes,4,opt,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
}

func (m *MsgPublishNft) Reset()         { *m = MsgPublishNft{} }
func (m *MsgPublishNft) String() string { return proto.CompactTextString(m) }
func (*MsgPublishNft) ProtoMessage()    {}
func (*MsgPublishNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{2}
}
func (m *MsgPublishNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishNft.Merge(m, src)
}
func (m *MsgPublishNft) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishNft) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishNft.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishNft proto.InternalMessageInfo

func (m *MsgPublishNft) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPublishNft) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *MsgPublishNft) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func (m *MsgPublishNft) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

type MsgPublishNftResponse struct {
}

func (m *MsgPublishNftResponse) Reset()         { *m = MsgPublishNftResponse{} }
func (m *MsgPublishNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPublishNftResponse) ProtoMessage()    {}
func (*MsgPublishNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{3}
}
func (m *MsgPublishNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishNftResponse.Merge(m, src)
}
func (m *MsgPublishNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishNftResponse proto.InternalMessageInfo

type MsgBuyNft struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgBuyNft) Reset()         { *m = MsgBuyNft{} }
func (m *MsgBuyNft) String() string { return proto.CompactTextString(m) }
func (*MsgBuyNft) ProtoMessage()    {}
func (*MsgBuyNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{4}
}
func (m *MsgBuyNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyNft.Merge(m, src)
}
func (m *MsgBuyNft) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyNft) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyNft.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyNft proto.InternalMessageInfo

func (m *MsgBuyNft) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBuyNft) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgBuyNftResponse struct {
}

func (m *MsgBuyNftResponse) Reset()         { *m = MsgBuyNftResponse{} }
func (m *MsgBuyNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyNftResponse) ProtoMessage()    {}
func (*MsgBuyNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{5}
}
func (m *MsgBuyNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyNftResponse.Merge(m, src)
}
func (m *MsgBuyNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyNftResponse proto.InternalMessageInfo

type MsgMintNft struct {
	Creator   string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DenomId   string     `protobuf:"bytes,2,opt,name=denomId,proto3" json:"denomId,omitempty"`
	Recipient string     `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Price     types.Coin `protobuf:"bytes,4,opt,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	Name      string     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Uri       string     `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`
	Data      string     `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgMintNft) Reset()         { *m = MsgMintNft{} }
func (m *MsgMintNft) String() string { return proto.CompactTextString(m) }
func (*MsgMintNft) ProtoMessage()    {}
func (*MsgMintNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{6}
}
func (m *MsgMintNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintNft.Merge(m, src)
}
func (m *MsgMintNft) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintNft) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintNft.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintNft proto.InternalMessageInfo

func (m *MsgMintNft) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMintNft) GetDenomId() string {
	if m != nil {
		return m.DenomId
	}
	return ""
}

func (m *MsgMintNft) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MsgMintNft) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func (m *MsgMintNft) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgMintNft) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *MsgMintNft) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type MsgMintNftResponse struct {
}

func (m *MsgMintNftResponse) Reset()         { *m = MsgMintNftResponse{} }
func (m *MsgMintNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintNftResponse) ProtoMessage()    {}
func (*MsgMintNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{7}
}
func (m *MsgMintNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintNftResponse.Merge(m, src)
}
func (m *MsgMintNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintNftResponse proto.InternalMessageInfo

type MsgRemoveNft struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRemoveNft) Reset()         { *m = MsgRemoveNft{} }
func (m *MsgRemoveNft) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveNft) ProtoMessage()    {}
func (*MsgRemoveNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{8}
}
func (m *MsgRemoveNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveNft.Merge(m, src)
}
func (m *MsgRemoveNft) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveNft) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveNft.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveNft proto.InternalMessageInfo

func (m *MsgRemoveNft) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveNft) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgRemoveNftResponse struct {
}

func (m *MsgRemoveNftResponse) Reset()         { *m = MsgRemoveNftResponse{} }
func (m *MsgRemoveNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveNftResponse) ProtoMessage()    {}
func (*MsgRemoveNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_689d664ba3f09b75, []int{9}
}
func (m *MsgRemoveNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveNftResponse.Merge(m, src)
}
func (m *MsgRemoveNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveNftResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPublishCollection)(nil), "cudoventures.cudosnode.marketplace.MsgPublishCollection")
	proto.RegisterType((*MsgPublishCollectionResponse)(nil), "cudoventures.cudosnode.marketplace.MsgPublishCollectionResponse")
	proto.RegisterType((*MsgPublishNft)(nil), "cudoventures.cudosnode.marketplace.MsgPublishNft")
	proto.RegisterType((*MsgPublishNftResponse)(nil), "cudoventures.cudosnode.marketplace.MsgPublishNftResponse")
	proto.RegisterType((*MsgBuyNft)(nil), "cudoventures.cudosnode.marketplace.MsgBuyNft")
	proto.RegisterType((*MsgBuyNftResponse)(nil), "cudoventures.cudosnode.marketplace.MsgBuyNftResponse")
	proto.RegisterType((*MsgMintNft)(nil), "cudoventures.cudosnode.marketplace.MsgMintNft")
	proto.RegisterType((*MsgMintNftResponse)(nil), "cudoventures.cudosnode.marketplace.MsgMintNftResponse")
	proto.RegisterType((*MsgRemoveNft)(nil), "cudoventures.cudosnode.marketplace.MsgRemoveNft")
	proto.RegisterType((*MsgRemoveNftResponse)(nil), "cudoventures.cudosnode.marketplace.MsgRemoveNftResponse")
}

func init() { proto.RegisterFile("marketplace/tx.proto", fileDescriptor_689d664ba3f09b75) }

var fileDescriptor_689d664ba3f09b75 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0x13, 0xb7, 0x55, 0xa6, 0x7f, 0x7f, 0xa8, 0x09, 0xe0, 0x5a, 0x95, 0x5b, 0xf9, 0x14,
	0x09, 0xd5, 0x6e, 0x8b, 0x5a, 0x95, 0x1b, 0x4a, 0x4f, 0x1c, 0x5c, 0x55, 0x3e, 0x80, 0x04, 0x07,
	0xe4, 0xd8, 0x5b, 0x77, 0x55, 0x7b, 0xd7, 0x78, 0xd7, 0xa1, 0xe1, 0xc4, 0x1b, 0xc0, 0x73, 0xf0,
	0x14, 0x1c, 0x7b, 0xec, 0x91, 0x13, 0xa0, 0xe4, 0x01, 0x78, 0x00, 0x2e, 0xc8, 0xf6, 0xc6, 0x4e,
	0xa0, 0xb4, 0x71, 0x0f, 0x9c, 0x3c, 0xb3, 0x33, 0xdf, 0x37, 0x9e, 0x6f, 0x67, 0xb4, 0xd0, 0x89,
	0xdc, 0xe4, 0x0c, 0xf1, 0x38, 0x74, 0x3d, 0x64, 0xf1, 0x73, 0x33, 0x4e, 0x28, 0xa7, 0x8a, 0xe1,
	0xa5, 0x3e, 0x1d, 0x20, 0xc2, 0xd3, 0x04, 0x31, 0x33, 0x73, 0x18, 0xa1, 0x3e, 0x32, 0xa7, 0x92,
	0xb5, 0xb5, 0x69, 0x64, 0x42, 0x87, 0x6e, 0xc8, 0x87, 0x05, 0x5c, 0xeb, 0x04, 0x34, 0xa0, 0xb9,
	0x69, 0x65, 0x96, 0x38, 0x5d, 0xf3, 0x28, 0x8b, 0x28, 0x7b, 0x5d, 0x04, 0x0a, 0x47, 0x84, 0xf4,
	0xc2, 0xb3, 0xfa, 0x2e, 0x43, 0xd6, 0x60, 0xa7, 0x8f, 0xb8, 0xbb, 0x63, 0x79, 0x14, 0x93, 0x22,
	0x6e, 0xbc, 0x6f, 0x42, 0xc7, 0x66, 0xc1, 0x71, 0xda, 0x0f, 0x31, 0x3b, 0x3d, 0xa4, 0x61, 0x88,
	0x3c, 0x8e, 0x29, 0x51, 0x54, 0x58, 0xf2, 0x12, 0xe4, 0x72, 0x9a, 0xa8, 0xd2, 0xa6, 0xd4, 0x6d,
	0x3b, 0x13, 0x37, 0x8b, 0xf8, 0x88, 0xd0, 0xe8, 0x99, 0xaf, 0x36, 0x8b, 0x88, 0x70, 0x95, 0x17,
	0xb0, 0x12, 0x61, 0xc2, 0x9d, 0xfc, 0x97, 0x31, 0x62, 0x6a, 0x6b, 0xb3, 0xd5, 0x5d, 0xde, 0x7d,
	0x64, 0xde, 0xdc, 0xb4, 0x59, 0x80, 0x86, 0x3d, 0xf9, 0xe2, 0xeb, 0x46, 0xc3, 0x99, 0xe5, 0x51,
	0x5e, 0xc1, 0x9d, 0x04, 0x31, 0x37, 0x44, 0x15, 0xb5, 0x7c, 0x5b, 0xea, 0xdf, 0x99, 0x0c, 0x1d,
	0xd6, 0xaf, 0x52, 0xc0, 0x41, 0x2c, 0xa6, 0x84, 0x21, 0xe3, 0xb3, 0x04, 0x2b, 0x55, 0xc2, 0xd1,
	0x09, 0xbf, 0x5e, 0x1b, 0x4e, 0xcf, 0x10, 0xa9, 0xb4, 0x11, 0xee, 0xb4, 0x6a, 0xad, 0x59, 0xd5,
	0x5c, 0x58, 0x88, 0x13, 0xec, 0x21, 0x55, 0xde, 0x94, 0xba, 0xcb, 0xbb, 0x6b, 0xa6, 0xb8, 0xc0,
	0xec, 0xca, 0x4c, 0x71, 0x65, 0xe6, 0x21, 0xc5, 0xa4, 0xb7, 0x9d, 0x35, 0xf0, 0xe9, 0xdb, 0x46,
	0x37, 0xc0, 0xfc, 0x34, 0xed, 0x9b, 0x1e, 0x8d, 0xc4, 0x6d, 0x8b, 0xcf, 0x16, 0xf3, 0xcf, 0x2c,
	0x3e, 0x8c, 0x11, 0xcb, 0x01, 0xcc, 0x29, 0x98, 0x8d, 0x87, 0x70, 0x7f, 0xa6, 0x83, 0xb2, 0xb7,
	0x3d, 0x68, 0xdb, 0x2c, 0xe8, 0xa5, 0xc3, 0xeb, 0xdb, 0xfa, 0x1f, 0x9a, 0xb8, 0xe8, 0x48, 0x76,
	0x9a, 0xd8, 0x37, 0xee, 0xc1, 0x6a, 0x09, 0x2b, 0xb9, 0x7e, 0x4a, 0x00, 0x36, 0x0b, 0x6c, 0x4c,
	0xf8, 0x8d, 0x22, 0xfd, 0x65, 0x80, 0xd6, 0xa1, 0x9d, 0x20, 0x0f, 0xc7, 0x18, 0x11, 0x2e, 0x64,
	0xaa, 0x0e, 0xfe, 0x81, 0x50, 0x8a, 0x02, 0x32, 0x71, 0x23, 0xa4, 0x2e, 0xe4, 0xb5, 0x73, 0x5b,
	0xb9, 0x0b, 0xad, 0x34, 0xc1, 0xea, 0x62, 0x7e, 0x94, 0x99, 0x59, 0x96, 0xef, 0x72, 0x57, 0x5d,
	0x2a, 0xb2, 0x32, 0xdb, 0xe8, 0x80, 0x52, 0x35, 0x5f, 0x6a, 0x72, 0x00, 0xff, 0xd9, 0x2c, 0x70,
	0x50, 0x44, 0x07, 0xa8, 0x9e, 0xc4, 0x0f, 0xf2, 0xbd, 0x2c, 0x91, 0x13, 0xc6, 0xdd, 0x1f, 0x32,
	0xb4, 0x6c, 0x16, 0x28, 0x1f, 0x24, 0x58, 0xfd, 0x73, 0x6b, 0x0f, 0xe6, 0xd9, 0x87, 0xab, 0xa6,
	0x5d, 0x7b, 0x7a, 0x5b, 0xe4, 0xe4, 0xcf, 0x94, 0x77, 0x00, 0x53, 0x3b, 0xb2, 0x53, 0x8f, 0xef,
	0xe8, 0x84, 0x6b, 0x4f, 0x6a, 0x43, 0xca, 0xda, 0x04, 0x16, 0xc5, 0x10, 0x6f, 0xcd, 0x49, 0x52,
	0xa4, 0x6b, 0x7b, 0xb5, 0xd2, 0xcb, 0x7a, 0x6f, 0x60, 0x69, 0x32, 0xe7, 0xe6, 0x9c, 0x0c, 0x22,
	0x5f, 0xdb, 0xaf, 0x97, 0x5f, 0x96, 0x7c, 0x0b, 0xed, 0x6a, 0x8e, 0xb6, 0xe7, 0x24, 0x29, 0x11,
	0xda, 0x41, 0x5d, 0xc4, 0xa4, 0x70, 0xef, 0xf8, 0x62, 0xa4, 0x4b, 0x97, 0x23, 0x5d, 0xfa, 0x3e,
	0xd2, 0xa5, 0x8f, 0x63, 0xbd, 0x71, 0x39, 0xd6, 0x1b, 0x5f, 0xc6, 0x7a, 0xe3, 0xe5, 0xfe, 0xd4,
	0x7a, 0x1d, 0xa6, 0x3e, 0x7d, 0x2e, 0xd8, 0xad, 0x9c, 0x7d, 0x2b, 0xa3, 0xb7, 0xce, 0xad, 0x99,
	0x77, 0x30, 0x5b, 0xb9, 0xfe, 0x62, 0xfe, 0xf6, 0x3c, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0xac,
	0x38, 0x02, 0x3c, 0x23, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	PublishCollection(ctx context.Context, in *MsgPublishCollection, opts ...grpc.CallOption) (*MsgPublishCollectionResponse, error)
	PublishNft(ctx context.Context, in *MsgPublishNft, opts ...grpc.CallOption) (*MsgPublishNftResponse, error)
	BuyNft(ctx context.Context, in *MsgBuyNft, opts ...grpc.CallOption) (*MsgBuyNftResponse, error)
	MintNft(ctx context.Context, in *MsgMintNft, opts ...grpc.CallOption) (*MsgMintNftResponse, error)
	RemoveNft(ctx context.Context, in *MsgRemoveNft, opts ...grpc.CallOption) (*MsgRemoveNftResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PublishCollection(ctx context.Context, in *MsgPublishCollection, opts ...grpc.CallOption) (*MsgPublishCollectionResponse, error) {
	out := new(MsgPublishCollectionResponse)
	err := c.cc.Invoke(ctx, "/cudoventures.cudosnode.marketplace.Msg/PublishCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PublishNft(ctx context.Context, in *MsgPublishNft, opts ...grpc.CallOption) (*MsgPublishNftResponse, error) {
	out := new(MsgPublishNftResponse)
	err := c.cc.Invoke(ctx, "/cudoventures.cudosnode.marketplace.Msg/PublishNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyNft(ctx context.Context, in *MsgBuyNft, opts ...grpc.CallOption) (*MsgBuyNftResponse, error) {
	out := new(MsgBuyNftResponse)
	err := c.cc.Invoke(ctx, "/cudoventures.cudosnode.marketplace.Msg/BuyNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintNft(ctx context.Context, in *MsgMintNft, opts ...grpc.CallOption) (*MsgMintNftResponse, error) {
	out := new(MsgMintNftResponse)
	err := c.cc.Invoke(ctx, "/cudoventures.cudosnode.marketplace.Msg/MintNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveNft(ctx context.Context, in *MsgRemoveNft, opts ...grpc.CallOption) (*MsgRemoveNftResponse, error) {
	out := new(MsgRemoveNftResponse)
	err := c.cc.Invoke(ctx, "/cudoventures.cudosnode.marketplace.Msg/RemoveNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	PublishCollection(context.Context, *MsgPublishCollection) (*MsgPublishCollectionResponse, error)
	PublishNft(context.Context, *MsgPublishNft) (*MsgPublishNftResponse, error)
	BuyNft(context.Context, *MsgBuyNft) (*MsgBuyNftResponse, error)
	MintNft(context.Context, *MsgMintNft) (*MsgMintNftResponse, error)
	RemoveNft(context.Context, *MsgRemoveNft) (*MsgRemoveNftResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PublishCollection(ctx context.Context, req *MsgPublishCollection) (*MsgPublishCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishCollection not implemented")
}
func (*UnimplementedMsgServer) PublishNft(ctx context.Context, req *MsgPublishNft) (*MsgPublishNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNft not implemented")
}
func (*UnimplementedMsgServer) BuyNft(ctx context.Context, req *MsgBuyNft) (*MsgBuyNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyNft not implemented")
}
func (*UnimplementedMsgServer) MintNft(ctx context.Context, req *MsgMintNft) (*MsgMintNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintNft not implemented")
}
func (*UnimplementedMsgServer) RemoveNft(ctx context.Context, req *MsgRemoveNft) (*MsgRemoveNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNft not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PublishCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPublishCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PublishCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cudoventures.cudosnode.marketplace.Msg/PublishCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PublishCollection(ctx, req.(*MsgPublishCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PublishNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPublishNft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PublishNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cudoventures.cudosnode.marketplace.Msg/PublishNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PublishNft(ctx, req.(*MsgPublishNft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyNft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cudoventures.cudosnode.marketplace.Msg/BuyNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyNft(ctx, req.(*MsgBuyNft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintNft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cudoventures.cudosnode.marketplace.Msg/MintNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintNft(ctx, req.(*MsgMintNft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveNft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cudoventures.cudosnode.marketplace.Msg/RemoveNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveNft(ctx, req.(*MsgRemoveNft))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cudoventures.cudosnode.marketplace.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishCollection",
			Handler:    _Msg_PublishCollection_Handler,
		},
		{
			MethodName: "PublishNft",
			Handler:    _Msg_PublishNft_Handler,
		},
		{
			MethodName: "BuyNft",
			Handler:    _Msg_BuyNft_Handler,
		},
		{
			MethodName: "MintNft",
			Handler:    _Msg_MintNft_Handler,
		},
		{
			MethodName: "RemoveNft",
			Handler:    _Msg_RemoveNft_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace/tx.proto",
}

func (m *MsgPublishCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResaleRoyalties) > 0 {
		for iNdEx := len(m.ResaleRoyalties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResaleRoyalties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MintRoyalties) > 0 {
		for iNdEx := len(m.MintRoyalties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MintRoyalties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPublishCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPublishNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPublishNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuyNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPublishCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MintRoyalties) > 0 {
		for _, e := range m.MintRoyalties {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ResaleRoyalties) > 0 {
		for _, e := range m.ResaleRoyalties {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPublishCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPublishNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPublishNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuyNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgBuyNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgRemoveNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPublishCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRoyalties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRoyalties = append(m.MintRoyalties, Royalty{})
			if err := m.MintRoyalties[len(m.MintRoyalties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResaleRoyalties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResaleRoyalties = append(m.ResaleRoyalties, Royalty{})
			if err := m.ResaleRoyalties[len(m.ResaleRoyalties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
